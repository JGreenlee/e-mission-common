// Transcrypt'ed from Python, 2024-07-08 12:33:14
import {AssertionError, AttributeError, BaseException, DeprecationWarning, Exception, IndexError, IterableError, KeyError, NotImplementedError, RuntimeWarning, StopIteration, UserWarning, ValueError, Warning, __JsIterator__, __PyIterator__, __Terminal__, __add__, __and__, __call__, __class__, __envir__, __eq__, __floordiv__, __ge__, __get__, __getcm__, __getitem__, __getslice__, __getsm__, __gt__, __i__, __iadd__, __iand__, __idiv__, __ijsmod__, __ilshift__, __imatmul__, __imod__, __imul__, __in__, __init__, __ior__, __ipow__, __irshift__, __isub__, __ixor__, __jsUsePyNext__, __jsmod__, __k__, __kwargtrans__, __le__, __lshift__, __lt__, __matmul__, __mergefields__, __mergekwargtrans__, __mod__, __mul__, __ne__, __neg__, __nest__, __or__, __pow__, __pragma__, __pyUseJsNext__, __rshift__, __setitem__, __setproperty__, __setslice__, __sort__, __specialattrib__, __sub__, __super__, __t__, __terminal__, __truediv__, __withblock__, __xor__, abs, all, any, assert, bin, bool, bytearray, bytes, callable, chr, copy, deepcopy, delattr, dict, dir, divmod, enumerate, filter, float, getattr, hasattr, hex, input, int, isinstance, issubclass, len, list, map, max, min, object, oct, ord, pow, print, property, py_TypeError, py_iter, py_metatype, py_next, py_reversed, py_typeof, range, repr, round, set, setattr, sorted, str, sum, tuple, zip} from './org.transcrypt.__runtime__.js';
var __name__ = 'emcommon.diary.base_mode_colors';
export var modeColors = dict ({'pink': '#c32e85', 'red': '#c21725', 'orange': '#bf5900', 'green': '#008148', 'blue': '#0074b7', 'periwinkle': '#6356bf', 'magenta': '#9240a4', 'grey': '#555555', 'taupe': '#7d585a'});
export var BaseModes = dict ({'IN_VEHICLE': dict ({'name': 'IN_VEHICLE', 'icon': 'speedometer', 'color': modeColors.red}), 'BICYCLING': dict ({'name': 'BICYCLING', 'icon': 'bike', 'color': modeColors.green}), 'ON_FOOT': dict ({'name': 'ON_FOOT', 'icon': 'walk', 'color': modeColors.blue}), 'UNKNOWN': dict ({'name': 'UNKNOWN', 'icon': 'help', 'color': modeColors.grey}), 'WALKING': dict ({'name': 'WALKING', 'icon': 'walk', 'color': modeColors.blue}), 'AIR_OR_HSR': dict ({'name': 'AIR_OR_HSR', 'icon': 'airplane', 'color': modeColors.orange}), 'CAR': dict ({'name': 'CAR', 'icon': 'car', 'color': modeColors.red}), 'E_CAR': dict ({'name': 'E_CAR', 'icon': 'car-electric', 'color': modeColors.pink}), 'E_BIKE': dict ({'name': 'E_BIKE', 'icon': 'bicycle-electric', 'color': modeColors.green}), 'E_SCOOTER': dict ({'name': 'E_SCOOTER', 'icon': 'scooter-electric', 'color': modeColors.periwinkle}), 'MOPED': dict ({'name': 'MOPED', 'icon': 'moped', 'color': modeColors.green}), 'TAXI': dict ({'name': 'TAXI', 'icon': 'taxi', 'color': modeColors.red}), 'BUS': dict ({'name': 'BUS', 'icon': 'bus-side', 'color': modeColors.magenta}), 'AIR': dict ({'name': 'AIR', 'icon': 'airplane', 'color': modeColors.orange}), 'LIGHT_RAIL': dict ({'name': 'LIGHT_RAIL', 'icon': 'train-car-passenger', 'color': modeColors.periwinkle}), 'TRAIN': dict ({'name': 'TRAIN', 'icon': 'train-car-passenger', 'color': modeColors.periwinkle}), 'TRAM': dict ({'name': 'TRAM', 'icon': 'fas fa-tram', 'color': modeColors.periwinkle}), 'SUBWAY': dict ({'name': 'SUBWAY', 'icon': 'subway-variant', 'color': modeColors.periwinkle}), 'FERRY': dict ({'name': 'FERRY', 'icon': 'ferry', 'color': modeColors.taupe}), 'TROLLEYBUS': dict ({'name': 'TROLLEYBUS', 'icon': 'bus-side', 'color': modeColors.taupe}), 'UNPROCESSED': dict ({'name': 'UNPROCESSED', 'icon': 'help', 'color': modeColors.grey}), 'OTHER': dict ({'name': 'OTHER', 'icon': 'pencil-circle', 'color': modeColors.taupe})});
export var getBaseModeByKey = function (motionName) {
	var key = ('' + motionName).toUpperCase ();
	var py_pop = key.py_split ('.').py_pop ();
	return py_pop && BaseModes [py_pop] || BaseModes ['UNKNOWN'];
};

//# sourceMappingURL=emcommon.diary.base_mode_colors.map